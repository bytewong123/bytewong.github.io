<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>链表 on wangzijie&#39;s site</title>
    <link>https://bytewong123.github.io/tags/%E9%93%BE%E8%A1%A8/</link>
    <description>Recent content in 链表 on wangzijie&#39;s site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 14 Nov 2021 10:53:59 +0800</lastBuildDate><atom:link href="https://bytewong123.github.io/tags/%E9%93%BE%E8%A1%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>leetcode19 删除链表倒数第n个节点</title>
      <link>https://bytewong123.github.io/posts/leetcode_19/</link>
      <pubDate>Sun, 14 Nov 2021 10:53:59 +0800</pubDate>
      
      <guid>https://bytewong123.github.io/posts/leetcode_19/</guid>
      <description>链接 https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/
题目 给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。 进阶：你能尝试使用一趟扫描实现吗？ 输入：head = [1,2,3,4,5], n = 2 输出：[1,2,3,5] 示例 2： 输入：head = [1], n = 1 输出：[] 示例 3： 输入：head = [1,2], n = 1 输出：[1] 思路  使用快慢指针，快指针比慢指针开始时多移动n步 然后当快指针移到尾部，慢指针所指的位置即为删除位置 需要处理好边界情况，使用一个虚拟头节点可以方便移动  /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func removeNthFromEnd(head *ListNode, n int) *ListNode { dumb := new(ListNode) dumb.Next = head node := dumb slow := node fast := node for n &amp;gt; 0 { fast = fast.</description>
    </item>
    
    <item>
      <title>leetcode21 合并两个有序链表</title>
      <link>https://bytewong123.github.io/posts/leetcode_21/</link>
      <pubDate>Sun, 14 Nov 2021 10:53:59 +0800</pubDate>
      
      <guid>https://bytewong123.github.io/posts/leetcode_21/</guid>
      <description>链接 https://leetcode-cn.com/problems/merge-two-sorted-lists/
题目 将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 思路  遍历两个链表，每次将值小的节点加入到当前指针所指位置即可  /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode { n := new(ListNode) head := n for l1 != nil &amp;amp;&amp;amp; l2 != nil { if l1.Val &amp;lt; l2.Val { n.Next = l1 l1 = l1.Next } else { n.Next = l2 l2 = l2.</description>
    </item>
    
    <item>
      <title>leetcode23 合并k个升序链表</title>
      <link>https://bytewong123.github.io/posts/leetcode_23/</link>
      <pubDate>Sun, 14 Nov 2021 10:53:59 +0800</pubDate>
      
      <guid>https://bytewong123.github.io/posts/leetcode_23/</guid>
      <description>链接 https://leetcode-cn.com/problems/merge-k-sorted-lists/
题目 给你一个链表数组，每个链表都已经按升序排列。 请你将所有链表合并到一个升序链表中，返回合并后的链表。 示例 1： 输入：lists = [[1,4,5],[1,3,4],[2,6]] 输出：[1,1,2,3,4,4,5,6] 解释：链表数组如下： [ 1-&amp;gt;4-&amp;gt;5, 1-&amp;gt;3-&amp;gt;4, 2-&amp;gt;6 ] 将它们合并到一个有序链表中得到。 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4-&amp;gt;5-&amp;gt;6 示例 2： 输入：lists = [] 输出：[] 示例 3： 输入：lists = [[]] 输出：[] 思路  首先将所有n个链表的头节点都插入到堆中 不断从堆中弹出元素，插入到当前节点，若弹出元素的next不为空，则继续插入到堆中 当弹出的元素为空，结束  时空复杂度  时间复杂度 假设链表数为n，总共m个节点 每次插入元素需要O(logn)，弹出元素O(1)，m个节点入堆时间复杂度O(mlogn) 空间复杂度 堆需要O(n)  /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func mergeKLists(lists []*ListNode) *ListNode { heap := make([]*ListNode, 0, len(lists)) for i := 0; i &amp;lt; len(lists); i++ { if lists[i] == nil { continue } push(&amp;amp;heap, lists[i]) } n := new(ListNode) head := n for { poped := pop(&amp;amp;heap) if poped == nil { break } n.</description>
    </item>
    
    <item>
      <title>leetcode25 k个一组翻转链表</title>
      <link>https://bytewong123.github.io/posts/leetcode_25/</link>
      <pubDate>Sun, 14 Nov 2021 10:53:59 +0800</pubDate>
      
      <guid>https://bytewong123.github.io/posts/leetcode_25/</guid>
      <description>链接 https://leetcode-cn.com/problems/reverse-nodes-in-k-group/
题目 给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。 k 是一个正整数，它的值小于或等于链表的长度。 如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。 进阶： 你可以设计一个只使用常数额外空间的算法来解决此问题吗？ 你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。 思路  每次找到需要逆置的开头和结尾，逆置这一段，并返回新的开头和结尾 维护好逆置后开头和结尾的startPre和endNext的指针关系  时空复杂度  时间复杂度 O(n) 空间复杂度 O(1)  /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func reverseKGroup(head *ListNode, k int) *ListNode { if head == nil { return nil } dummy := new(ListNode) dummy.Next = head startPrev, endNext := dummy, dummy start, end := head, head i := 1 for { for i &amp;lt; k { if end == nil { return dummy.</description>
    </item>
    
  </channel>
</rss>
