<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数组 on wangzijie&#39;s site</title>
    <link>https://bytewong123.github.io/tags/%E6%95%B0%E7%BB%84/</link>
    <description>Recent content in 数组 on wangzijie&#39;s site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 14 Nov 2021 10:53:59 +0800</lastBuildDate><atom:link href="https://bytewong123.github.io/tags/%E6%95%B0%E7%BB%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>leetcode15 三数之和</title>
      <link>https://bytewong123.github.io/posts/leetcode_15/</link>
      <pubDate>Sun, 14 Nov 2021 10:53:59 +0800</pubDate>
      
      <guid>https://bytewong123.github.io/posts/leetcode_15/</guid>
      <description>链接 https://leetcode-cn.com/problems/3sum/submissions/
题目 给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。 注意：答案中不可以包含重复的三元组。 示例 1： 输入：nums = [-1,0,1,2,-1,-4] 输出：[[-1,-1,2],[-1,0,1]] 示例 2： 输入：nums = [] 输出：[] 示例 3： 输入：nums = [0] 输出：[] 思路  本题求三数之和，故使用双指针的方法，固定一个基准指针为数组的开头，然后另外两位开始不断靠拢移动，直到找到答案，然后基准指针开始右移 但是需要将数组排序，这样才能满足左小右大，方便通过判断当前和的大小来移动相应的指针 需要注意的是存在重复解的情况  当基准指针与上一次基准指针相同，那么双指针的左指针若上一次是当前的基准指针的位置，且满足解，那么这个解会被保留；但是若左指针不是当前基准指针的位置，而是当前基准指针的右侧，那么重复解就出现了，若不止一个，那么当前基准指针的右侧会有多个重复解，因此需要排除这种情况，这种情况不会漏掉解 若左指针与上一次左指针的位置相同，那么也需要过滤掉，不用担心丢解的情况，因为上一轮已经将解都保留下来了    func threeSum(nums []int) [][]int { quickSort(nums, 0, len(nums) - 1) result := [][]int{} for i := 0; i &amp;lt;= len(nums) - 2; i++ { if i &amp;gt; 0 &amp;amp;&amp;amp; nums[i] == nums[i - 1] { continue } left, right := i + 1, len(nums) - 1 other := 0 - nums[i] for left &amp;lt; right { if nums[left] == nums[left - 1] &amp;amp;&amp;amp; left - 1 !</description>
    </item>
    
    <item>
      <title>leetcode26 删除有序数组的重复项</title>
      <link>https://bytewong123.github.io/posts/leetcode_26/</link>
      <pubDate>Sun, 14 Nov 2021 10:53:59 +0800</pubDate>
      
      <guid>https://bytewong123.github.io/posts/leetcode_26/</guid>
      <description>链接 https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/
题目 给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。 思路  使用双指针法，左指针指向当前位置，右指针去探索不重复的元素 若左指针与右指针的值相同，右指针开始右移，直到找到一个和左指针不同的值 然后左指针的左边一个位置替换为右指针找到的第一个与左指针不同的值即可  时空复杂度  时间复杂度 O(n) 空间复杂度 O(1)  func removeDuplicates(nums []int) int { if len(nums) == 0 { return 0 } left, right := 0, 0 for right &amp;lt; len(nums) { if nums[left] == nums[right] { right++ continue } left++ nums[left] = nums[right] right++ } return left + 1 } </description>
    </item>
    
    <item>
      <title>leetcode6 z字形变化</title>
      <link>https://bytewong123.github.io/posts/leetcode_6/</link>
      <pubDate>Sun, 14 Nov 2021 10:53:59 +0800</pubDate>
      
      <guid>https://bytewong123.github.io/posts/leetcode_6/</guid>
      <description>链接 https://leetcode-cn.com/problems/zigzag-conversion/
题目 将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。
比如输入字符串为 &amp;ldquo;PAYPALISHIRING&amp;rdquo; 行数为 3 时，排列如下：
P A H N A P L S I I G Y I R 之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：&amp;ldquo;PAHNAPLSIIGYIR&amp;rdquo;。
请你实现这个将字符串进行指定行数变换的函数：
string convert(string s, int numRows); 思路  可以看出，题目要求多少行，最终结果即为每一行的结果拼接在一起即可。因此我们需要做的就是不断填充每一行的字符串 如何填充呢？首先根据行数n，创建n个数组，然后不断移动字符串的索引，最开始不断递增填充每个字符串，直到填充到最后一行，然后翻转开始递减每一行，直到填充了第一行，再次翻转。 最终，将各行的字符串拼接在一起，即为最终的答案 注意当行数为1时，由于它既是第一行也是最后一行，因此需要特殊处理  func convert(s string, numRows int) string { if numRows == 1 { return s } matrix := make([][]byte, numRows) for i := 0; i &amp;lt; numRows; i++ { matrix[i] = []byte{} } flag := -1 i := 0 for j := 0; j &amp;lt; len(s); j++ { matrix[i] = append(matrix[i], s[j]) if i == numRows - 1 || i == 0 { flag = -flag } i += flag } result := []byte{} for i := 0; i &amp;lt; numRows; i++ { result = append(result, matrix[i].</description>
    </item>
    
  </channel>
</rss>
