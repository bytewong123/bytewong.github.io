<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>动态规划 on wangzijie&#39;s site</title>
    <link>https://bytewong123.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
    <description>Recent content in 动态规划 on wangzijie&#39;s site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 14 Nov 2021 10:53:59 +0800</lastBuildDate><atom:link href="https://bytewong123.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>leetcode5 最长回文子串</title>
      <link>https://bytewong123.github.io/posts/leetcode_5/</link>
      <pubDate>Sun, 14 Nov 2021 10:53:59 +0800</pubDate>
      
      <guid>https://bytewong123.github.io/posts/leetcode_5/</guid>
      <description>链接：https://leetcode-cn.com/problems/longest-palindromic-substring/
给你一个字符串 s，找到 s 中最长的回文子串。
思路：
 我们需要用一个二维数组来保存当前回文字符串的状态。dp[i][j]代表以i开头，j结尾的字符串是否为回文字符串。 然后从头开始，每次圈定一个固定长度的字符串，判断是否为回文子串，然后不断向右移，直到走到头，在这个过程中，我们会不断填充这个dp数组 不断扩大圈定范围，判断圈定范围的字符串是否为回文子串，然后不断右移，在这个过程中更新最大长度和左右索引 最后返回左右索引所圈定的字符串即可  func longestPalindrome(s string) string { dp := make([][]bool, len(s)) for i := 0; i &amp;lt; len(s); i++ { dp[i] = make([]bool, len(s)) dp[i][i] = true } left, right := 0, 0 maxLen := 1 for step := 0; step &amp;lt; len(s); step++ { for i := 0; i + step &amp;lt; len(s); i++ { j := i + step if i == j { continue } if step == 1 &amp;amp;&amp;amp; s[i] == s[j] { dp[i][j] = true left, right = i, j maxLen = 2 continue } if dp[i + 1][j - 1] &amp;amp;&amp;amp; s[i] == s[j] { dp[i][j] = true if j - i + 1 &amp;gt; maxLen { left, right = i, j maxLen = j - i + 1 } } } } return s[left:right+1] } </description>
    </item>
    
  </channel>
</rss>
