<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wangzijie&#39;s site</title>
    <link>https://bytewong123.github.io/</link>
    <description>Recent content on wangzijie&#39;s site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 14 Nov 2021 10:53:59 +0800</lastBuildDate><atom:link href="https://bytewong123.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>leetcode11 盛最多水的容器</title>
      <link>https://bytewong123.github.io/posts/leetcode_11/</link>
      <pubDate>Sun, 14 Nov 2021 10:53:59 +0800</pubDate>
      
      <guid>https://bytewong123.github.io/posts/leetcode_11/</guid>
      <description>链接 https://leetcode-cn.com/problems/container-with-most-water/
题目 给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。 说明：你不能倾斜容器。 思路  通过设置左右两个指针 左右指针的举例为矩形的底边长 左右指针所指高度的较小值为矩形的高 此时需要移动指针，寻找下一个答案。将较小值的高度所代表的指针向内部移动。因为移动两个指针会导致底边长变短，这样才能找到高更大的值   这种做法是否会有面积遗漏？ 如果选择固定一根柱子，另外一根变化，水的面积会有什么变化吗？稍加思考可得：
  当前柱子是最两侧的柱子，水的宽度 为最大，其他的组合，水的宽度都比这个小。 左边柱子较短，决定了水的高度为 3。如果移动左边的柱子，新的水面高度不确定，一定不会超过右边的柱子高度 7。 如果移动右边的柱子，新的水面高度一定不会超过左边的柱子高度 3，也就是不会超过现在的水面高度。 由此可见，如果固定左边的柱子，移动右边的柱子，那么水的高度一定不会增加，且宽度一定减少，所以水的面积一定减少。这个时候，左边的柱子和任意一个其他柱子的组合，其实都可以排除了。也就是我们可以排除掉左边的柱子了  func maxArea(height []int) int { if len(height) &amp;lt; 2 { return 0 } left, right := 0, len(height) - 1 maxVal := 0 for left &amp;lt; right { area := (right - left) * min(height[left], height[right]) if area &amp;gt; maxVal { maxVal = area } if height[left] &amp;gt; height[right] { right-- } else { left++ } } return maxVal } func min(a, b int) int { if a &amp;lt; b { return a } return b } </description>
    </item>
    
    <item>
      <title>leetcode12 整数转罗马数字</title>
      <link>https://bytewong123.github.io/posts/leetcode_12/</link>
      <pubDate>Sun, 14 Nov 2021 10:53:59 +0800</pubDate>
      
      <guid>https://bytewong123.github.io/posts/leetcode_12/</guid>
      <description>链接 https://leetcode-cn.com/problems/integer-to-roman/
题目 罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。 字符 数值 I 1 V 5 X 10 L 50 C 100 D 500 M 1000 例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。 通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况： I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。 X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。 给你一个整数，将其转为罗马数字。 思路 根据罗马数字的唯一表示法，为了表示一个给定的整数num，我们寻找不超过 num 的最大符号值，将 num 减去该符号值，然后继续寻找不超过 num 的最大符号值，将该符号拼接在上一个找到的符号之后，循环直至 num 为 0。最后得到的字符串即为 num 的罗马数字表示。</description>
    </item>
    
    <item>
      <title>leetcode15 三数之和</title>
      <link>https://bytewong123.github.io/posts/leetcode_15/</link>
      <pubDate>Sun, 14 Nov 2021 10:53:59 +0800</pubDate>
      
      <guid>https://bytewong123.github.io/posts/leetcode_15/</guid>
      <description>链接 https://leetcode-cn.com/problems/3sum/submissions/
题目 给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。 注意：答案中不可以包含重复的三元组。 示例 1： 输入：nums = [-1,0,1,2,-1,-4] 输出：[[-1,-1,2],[-1,0,1]] 示例 2： 输入：nums = [] 输出：[] 示例 3： 输入：nums = [0] 输出：[] 思路  本题求三数之和，故使用双指针的方法，固定一个基准指针为数组的开头，然后另外两位开始不断靠拢移动，直到找到答案，然后基准指针开始右移 但是需要将数组排序，这样才能满足左小右大，方便通过判断当前和的大小来移动相应的指针 需要注意的是存在重复解的情况  当基准指针与上一次基准指针相同，那么双指针的左指针若上一次是当前的基准指针的位置，且满足解，那么这个解会被保留；但是若左指针不是当前基准指针的位置，而是当前基准指针的右侧，那么重复解就出现了，若不止一个，那么当前基准指针的右侧会有多个重复解，因此需要排除这种情况，这种情况不会漏掉解 若左指针与上一次左指针的位置相同，那么也需要过滤掉，不用担心丢解的情况，因为上一轮已经将解都保留下来了    func threeSum(nums []int) [][]int { quickSort(nums, 0, len(nums) - 1) result := [][]int{} for i := 0; i &amp;lt;= len(nums) - 2; i++ { if i &amp;gt; 0 &amp;amp;&amp;amp; nums[i] == nums[i - 1] { continue } left, right := i + 1, len(nums) - 1 other := 0 - nums[i] for left &amp;lt; right { if nums[left] == nums[left - 1] &amp;amp;&amp;amp; left - 1 !</description>
    </item>
    
    <item>
      <title>leetcode19 删除链表倒数第n个节点</title>
      <link>https://bytewong123.github.io/posts/leetcode_19/</link>
      <pubDate>Sun, 14 Nov 2021 10:53:59 +0800</pubDate>
      
      <guid>https://bytewong123.github.io/posts/leetcode_19/</guid>
      <description>链接 https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/
题目 给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。 进阶：你能尝试使用一趟扫描实现吗？ 输入：head = [1,2,3,4,5], n = 2 输出：[1,2,3,5] 示例 2： 输入：head = [1], n = 1 输出：[] 示例 3： 输入：head = [1,2], n = 1 输出：[1] 思路  使用快慢指针，快指针比慢指针开始时多移动n步 然后当快指针移到尾部，慢指针所指的位置即为删除位置 需要处理好边界情况，使用一个虚拟头节点可以方便移动  /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func removeNthFromEnd(head *ListNode, n int) *ListNode { dumb := new(ListNode) dumb.Next = head node := dumb slow := node fast := node for n &amp;gt; 0 { fast = fast.</description>
    </item>
    
    <item>
      <title>leetcode20 有效的括号</title>
      <link>https://bytewong123.github.io/posts/leetcode_20/</link>
      <pubDate>Sun, 14 Nov 2021 10:53:59 +0800</pubDate>
      
      <guid>https://bytewong123.github.io/posts/leetcode_20/</guid>
      <description>链接 https://leetcode-cn.com/problems/valid-parentheses/
题目 给定一个只包括 &#39;(&#39;，&#39;)&#39;，&#39;{&#39;，&#39;}&#39;，&#39;[&#39;，&#39;]&#39; 的字符串 s ，判断字符串是否有效。 有效字符串需满足： 左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。 示例 1： 输入：s = &amp;quot;()&amp;quot; 输出：true 示例 2： 输入：s = &amp;quot;()[]{}&amp;quot; 输出：true 示例 3： 输入：s = &amp;quot;(]&amp;quot; 输出：false 示例 4： 输入：s = &amp;quot;([)]&amp;quot; 输出：false 示例 5： 输入：s = &amp;quot;{[]}&amp;quot; 输出：true 思路  栈的常规思路，若新括号匹配到栈顶的括号，则栈顶括号弹出，新括号丢弃；未匹配到则新括号入栈  func isValid(s string) bool { stack := make([]byte, 0, len(s)) for i := 0; i &amp;lt; len(s); i++ { if len(stack) == 0 { stack = append(stack, s[i]) continue } if (s[i] == &amp;#39;)&amp;#39; &amp;amp;&amp;amp; stack[len(stack) - 1] == &amp;#39;(&amp;#39;) || (s[i] == &amp;#39;]&amp;#39; &amp;amp;&amp;amp; stack[len(stack) - 1] == &amp;#39;[&amp;#39;) || (s[i] == &amp;#39;}&amp;#39; &amp;amp;&amp;amp; stack[len(stack) - 1] == &amp;#39;{&amp;#39;) { stack = stack[:len(stack) - 1] } else { stack = append(stack, s[i]) } } return len(stack) == 0 } </description>
    </item>
    
    <item>
      <title>leetcode21 合并两个有序链表</title>
      <link>https://bytewong123.github.io/posts/leetcode_21/</link>
      <pubDate>Sun, 14 Nov 2021 10:53:59 +0800</pubDate>
      
      <guid>https://bytewong123.github.io/posts/leetcode_21/</guid>
      <description>链接 https://leetcode-cn.com/problems/merge-two-sorted-lists/
题目 将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 思路  遍历两个链表，每次将值小的节点加入到当前指针所指位置即可  /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode { n := new(ListNode) head := n for l1 != nil &amp;amp;&amp;amp; l2 != nil { if l1.Val &amp;lt; l2.Val { n.Next = l1 l1 = l1.Next } else { n.Next = l2 l2 = l2.</description>
    </item>
    
    <item>
      <title>leetcode23 合并k个升序链表</title>
      <link>https://bytewong123.github.io/posts/leetcode_23/</link>
      <pubDate>Sun, 14 Nov 2021 10:53:59 +0800</pubDate>
      
      <guid>https://bytewong123.github.io/posts/leetcode_23/</guid>
      <description>链接 https://leetcode-cn.com/problems/merge-k-sorted-lists/
题目 给你一个链表数组，每个链表都已经按升序排列。 请你将所有链表合并到一个升序链表中，返回合并后的链表。 示例 1： 输入：lists = [[1,4,5],[1,3,4],[2,6]] 输出：[1,1,2,3,4,4,5,6] 解释：链表数组如下： [ 1-&amp;gt;4-&amp;gt;5, 1-&amp;gt;3-&amp;gt;4, 2-&amp;gt;6 ] 将它们合并到一个有序链表中得到。 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4-&amp;gt;5-&amp;gt;6 示例 2： 输入：lists = [] 输出：[] 示例 3： 输入：lists = [[]] 输出：[] 思路  首先将所有n个链表的头节点都插入到堆中 不断从堆中弹出元素，插入到当前节点，若弹出元素的next不为空，则继续插入到堆中 当弹出的元素为空，结束  时空复杂度  时间复杂度 假设链表数为n，总共m个节点 每次插入元素需要O(logn)，弹出元素O(1)，m个节点入堆时间复杂度O(mlogn) 空间复杂度 堆需要O(n)  /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func mergeKLists(lists []*ListNode) *ListNode { heap := make([]*ListNode, 0, len(lists)) for i := 0; i &amp;lt; len(lists); i++ { if lists[i] == nil { continue } push(&amp;amp;heap, lists[i]) } n := new(ListNode) head := n for { poped := pop(&amp;amp;heap) if poped == nil { break } n.</description>
    </item>
    
    <item>
      <title>leetcode25 k个一组翻转链表</title>
      <link>https://bytewong123.github.io/posts/leetcode_25/</link>
      <pubDate>Sun, 14 Nov 2021 10:53:59 +0800</pubDate>
      
      <guid>https://bytewong123.github.io/posts/leetcode_25/</guid>
      <description>链接 https://leetcode-cn.com/problems/reverse-nodes-in-k-group/
题目 给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。 k 是一个正整数，它的值小于或等于链表的长度。 如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。 进阶： 你可以设计一个只使用常数额外空间的算法来解决此问题吗？ 你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。 思路  每次找到需要逆置的开头和结尾，逆置这一段，并返回新的开头和结尾 维护好逆置后开头和结尾的startPre和endNext的指针关系  时空复杂度  时间复杂度 O(n) 空间复杂度 O(1)  /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func reverseKGroup(head *ListNode, k int) *ListNode { if head == nil { return nil } dummy := new(ListNode) dummy.Next = head startPrev, endNext := dummy, dummy start, end := head, head i := 1 for { for i &amp;lt; k { if end == nil { return dummy.</description>
    </item>
    
    <item>
      <title>leetcode26 删除有序数组的重复项</title>
      <link>https://bytewong123.github.io/posts/leetcode_26/</link>
      <pubDate>Sun, 14 Nov 2021 10:53:59 +0800</pubDate>
      
      <guid>https://bytewong123.github.io/posts/leetcode_26/</guid>
      <description>链接 https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/
题目 给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。 思路  使用双指针法，左指针指向当前位置，右指针去探索不重复的元素 若左指针与右指针的值相同，右指针开始右移，直到找到一个和左指针不同的值 然后左指针的左边一个位置替换为右指针找到的第一个与左指针不同的值即可  时空复杂度  时间复杂度 O(n) 空间复杂度 O(1)  func removeDuplicates(nums []int) int { if len(nums) == 0 { return 0 } left, right := 0, 0 for right &amp;lt; len(nums) { if nums[left] == nums[right] { right++ continue } left++ nums[left] = nums[right] right++ } return left + 1 } </description>
    </item>
    
    <item>
      <title>leetcode5 最长回文子串</title>
      <link>https://bytewong123.github.io/posts/leetcode_5/</link>
      <pubDate>Sun, 14 Nov 2021 10:53:59 +0800</pubDate>
      
      <guid>https://bytewong123.github.io/posts/leetcode_5/</guid>
      <description>链接：https://leetcode-cn.com/problems/longest-palindromic-substring/
给你一个字符串 s，找到 s 中最长的回文子串。
思路：
 我们需要用一个二维数组来保存当前回文字符串的状态。dp[i][j]代表以i开头，j结尾的字符串是否为回文字符串。 然后从头开始，每次圈定一个固定长度的字符串，判断是否为回文子串，然后不断向右移，直到走到头，在这个过程中，我们会不断填充这个dp数组 不断扩大圈定范围，判断圈定范围的字符串是否为回文子串，然后不断右移，在这个过程中更新最大长度和左右索引 最后返回左右索引所圈定的字符串即可  func longestPalindrome(s string) string { dp := make([][]bool, len(s)) for i := 0; i &amp;lt; len(s); i++ { dp[i] = make([]bool, len(s)) dp[i][i] = true } left, right := 0, 0 maxLen := 1 for step := 0; step &amp;lt; len(s); step++ { for i := 0; i + step &amp;lt; len(s); i++ { j := i + step if i == j { continue } if step == 1 &amp;amp;&amp;amp; s[i] == s[j] { dp[i][j] = true left, right = i, j maxLen = 2 continue } if dp[i + 1][j - 1] &amp;amp;&amp;amp; s[i] == s[j] { dp[i][j] = true if j - i + 1 &amp;gt; maxLen { left, right = i, j maxLen = j - i + 1 } } } } return s[left:right+1] } </description>
    </item>
    
    <item>
      <title>leetcode6 z字形变化</title>
      <link>https://bytewong123.github.io/posts/leetcode_6/</link>
      <pubDate>Sun, 14 Nov 2021 10:53:59 +0800</pubDate>
      
      <guid>https://bytewong123.github.io/posts/leetcode_6/</guid>
      <description>链接 https://leetcode-cn.com/problems/zigzag-conversion/
题目 将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。
比如输入字符串为 &amp;ldquo;PAYPALISHIRING&amp;rdquo; 行数为 3 时，排列如下：
P A H N A P L S I I G Y I R 之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：&amp;ldquo;PAHNAPLSIIGYIR&amp;rdquo;。
请你实现这个将字符串进行指定行数变换的函数：
string convert(string s, int numRows); 思路  可以看出，题目要求多少行，最终结果即为每一行的结果拼接在一起即可。因此我们需要做的就是不断填充每一行的字符串 如何填充呢？首先根据行数n，创建n个数组，然后不断移动字符串的索引，最开始不断递增填充每个字符串，直到填充到最后一行，然后翻转开始递减每一行，直到填充了第一行，再次翻转。 最终，将各行的字符串拼接在一起，即为最终的答案 注意当行数为1时，由于它既是第一行也是最后一行，因此需要特殊处理  func convert(s string, numRows int) string { if numRows == 1 { return s } matrix := make([][]byte, numRows) for i := 0; i &amp;lt; numRows; i++ { matrix[i] = []byte{} } flag := -1 i := 0 for j := 0; j &amp;lt; len(s); j++ { matrix[i] = append(matrix[i], s[j]) if i == numRows - 1 || i == 0 { flag = -flag } i += flag } result := []byte{} for i := 0; i &amp;lt; numRows; i++ { result = append(result, matrix[i].</description>
    </item>
    
    <item>
      <title>leetcode7 整数反转</title>
      <link>https://bytewong123.github.io/posts/leetcode_7/</link>
      <pubDate>Sun, 14 Nov 2021 10:53:59 +0800</pubDate>
      
      <guid>https://bytewong123.github.io/posts/leetcode_7/</guid>
      <description>链接 https://leetcode-cn.com/problems/reverse-integer/
题目 给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。 如果反转后整数超过 32 位的有符号整数的范围 [−231, 231 − 1] ，就返回 0。 假设环境不允许存储 64 位整数（有符号或无符号）。 示例 1： 输入：x = 123 输出：321 示例 2： 输入：x = -123 输出：-321 示例 3： 输入：x = 120 输出：21 示例 4： 输入：x = 0 输出：0 思路  不断对x以10取模，得到最后一位 最后一位不断*10 + 下一次的模 x每次除以10，以便向左移动，直到&amp;lt;=0  func reverse(x int) int { if x == 0 { return 0 } negative := false if x &amp;lt; 0 { negative = true x = -x } num := 0 sum := 0 for x &amp;gt; 0 { num = x % 10 sum = sum * 10 + num x /= 10 } if negative { if sum &amp;gt; 1 &amp;lt;&amp;lt; 31 { return 0 } return -sum } if sum &amp;gt; 1 &amp;lt;&amp;lt; 31 - 1 { return 0 } return sum } </description>
    </item>
    
    <item>
      <title>leetcode8 字符串转换整数</title>
      <link>https://bytewong123.github.io/posts/leetcode_8/</link>
      <pubDate>Sun, 14 Nov 2021 10:53:59 +0800</pubDate>
      
      <guid>https://bytewong123.github.io/posts/leetcode_8/</guid>
      <description>链接 https://leetcode-cn.com/problems/string-to-integer-atoi/
题目 请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。 函数 myAtoi(string s) 的算法如下： 读入字符串并丢弃无用的前导空格 检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。 读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。 将前面步骤读入的这些数字转换为整数（即，&amp;quot;123&amp;quot; -&amp;gt; 123， &amp;quot;0032&amp;quot; -&amp;gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。 如果整数数超过 32 位有符号整数范围 [−231, 231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。 返回整数作为最终结果。 注意： 本题中的空白字符只包括空格字符 &#39; &#39; 。 除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。 思路 可以把解题拆接为几个步骤，依次攻克
 将原始字符串进行处理，得到只包含数字的字符串 将只包含数字的字符串去掉前面多余的0 将去掉多余的0的字符串转换成整数，注意边界条件处理  边界条件有两个，一个是底数不断*10时是否达到边界 一个是每一次累计到得到当前位为止的整数时，是否达到边界    func myAtoi(s string) int { s = strings.</description>
    </item>
    
    <item>
      <title>leetcode9 回文数</title>
      <link>https://bytewong123.github.io/posts/leetcode_9/</link>
      <pubDate>Sun, 14 Nov 2021 10:53:59 +0800</pubDate>
      
      <guid>https://bytewong123.github.io/posts/leetcode_9/</guid>
      <description>链接 https://leetcode-cn.com/problems/palindrome-number/
题目 给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。 回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。 思路  只需要将一个整数从右往左算一个新的整数，然后比较前后两个整数即可 从右往左求整数的方式，每次获取到右侧的一位，然后不断新数*10 + 右侧的第一位作为新数，不断循环直到老数变为0  func isPalindrome(x int) bool { if x &amp;lt; 0 { return false } origin := x newX := 0 base := 10 for x &amp;gt; 0 { extra := x % 10 newX = extra + base * newX x /= 10 } return newX == origin } </description>
    </item>
    
  </channel>
</rss>
